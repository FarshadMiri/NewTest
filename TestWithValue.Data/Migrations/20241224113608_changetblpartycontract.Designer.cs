// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestWithValue.Data;

#nullable disable

namespace TestWithValue.Data.Migrations
{
    [DbContext(typeof(TestWithValueDbContext))]
    [Migration("20241224113608_changetblpartycontract")]
    partial class changetblpartycontract
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<int>("AnswerValue")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Answers");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("TopicId");

                    b.ToTable("tbl_CartItems");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseId"));

                    b.Property<string>("CaseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CaseId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Cases");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("tbl_Cities");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("UserConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContractId");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Contracts");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_ContractClause", b =>
                {
                    b.Property<int>("ClauseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClauseId"));

                    b.Property<string>("ClauseText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClauseId");

                    b.ToTable("tbl_ContractClauses");

                    b.HasData(
                        new
                        {
                            ClauseId = 1,
                            ClauseText = "بند 1: این قرارداد تحت قوانین جمهوری اسلامی ایران تنظیم شده است."
                        },
                        new
                        {
                            ClauseId = 2,
                            ClauseText = "بند 2: طرفین موظف به حفظ اطلاعات محرمانه هستند."
                        },
                        new
                        {
                            ClauseId = 3,
                            ClauseText = "بند 3: مدت قرارداد از تاریخ امضا به مدت یک سال معتبر است."
                        },
                        new
                        {
                            ClauseId = 4,
                            ClauseText = "بند 4: کلیه اختلافات از طریق داوری حل می‌شود."
                        },
                        new
                        {
                            ClauseId = 5,
                            ClauseText = "بند 5: تمامی پرداخت‌ها به صورت ریالی انجام خواهد شد."
                        },
                        new
                        {
                            ClauseId = 6,
                            ClauseText = "بند 6: در صورت بروز اختلاف، حکمیت به وکیل تعیین شده واگذار می‌شود."
                        },
                        new
                        {
                            ClauseId = 7,
                            ClauseText = "بند 7: هر گونه تخلف منجر به فسخ قرارداد خواهد شد."
                        },
                        new
                        {
                            ClauseId = 8,
                            ClauseText = "بند 8: طرفین توافق دارند از امکانات سامانه الکترونیکی استفاده کنند."
                        },
                        new
                        {
                            ClauseId = 9,
                            ClauseText = "بند 9: حق تغییر در بندهای قرارداد با توافق طرفین امکان‌پذیر است."
                        },
                        new
                        {
                            ClauseId = 10,
                            ClauseText = "بند 10: جریمه تخلف معادل 10 درصد ارزش قرارداد خواهد بود."
                        },
                        new
                        {
                            ClauseId = 11,
                            ClauseText = "بند 11: قرارداد فقط با امضای هر دو طرف معتبر است."
                        },
                        new
                        {
                            ClauseId = 12,
                            ClauseText = "بند 12: خدمات پشتیبانی شامل هزینه جداگانه خواهد بود."
                        },
                        new
                        {
                            ClauseId = 13,
                            ClauseText = "بند 13: قرارداد باید در بازه زمانی توافق شده اجرا شود."
                        },
                        new
                        {
                            ClauseId = 14,
                            ClauseText = "بند 14: اطلاعات طرفین باید به صورت دقیق در سامانه وارد شود."
                        },
                        new
                        {
                            ClauseId = 15,
                            ClauseText = "بند 15: تعهدات مالی باید ظرف مدت 30 روز تسویه شود."
                        },
                        new
                        {
                            ClauseId = 16,
                            ClauseText = "بند 16: طرفین متعهد به رعایت الزامات محیط زیستی هستند."
                        },
                        new
                        {
                            ClauseId = 17,
                            ClauseText = "بند 17: تغییرات در قرارداد باید مکتوب و امضا شود."
                        },
                        new
                        {
                            ClauseId = 18,
                            ClauseText = "بند 18: قرارداد شامل مالیات بر ارزش افزوده می‌باشد."
                        },
                        new
                        {
                            ClauseId = 19,
                            ClauseText = "بند 19: در صورت بروز قوه قهریه، قرارداد به تعلیق در می‌آید."
                        },
                        new
                        {
                            ClauseId = 20,
                            ClauseText = "بند 20: هر گونه استفاده تجاری بدون مجوز ممنوع است."
                        });
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_ContractClauseMapping", b =>
                {
                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("ClauseId")
                        .HasColumnType("int");

                    b.HasKey("ContractId", "ClauseId");

                    b.HasIndex("ClauseId");

                    b.ToTable("tbl_ContractClauseMappings");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_ContractTitle", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleId"));

                    b.Property<string>("TitleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TitleId");

                    b.ToTable("tbl_ContractTitles");

                    b.HasData(
                        new
                        {
                            TitleId = 1,
                            TitleName = "قرارداد خدمات"
                        },
                        new
                        {
                            TitleId = 2,
                            TitleName = "قرارداد عدم افشاء (NDA)"
                        },
                        new
                        {
                            TitleId = 3,
                            TitleName = "قرارداد محرمانگی"
                        },
                        new
                        {
                            TitleId = 4,
                            TitleName = "قرارداد مشارکت"
                        },
                        new
                        {
                            TitleId = 5,
                            TitleName = "قرارداد استخدام"
                        },
                        new
                        {
                            TitleId = 6,
                            TitleName = "قرارداد اجاره"
                        },
                        new
                        {
                            TitleId = 7,
                            TitleName = "قرارداد فروش"
                        },
                        new
                        {
                            TitleId = 8,
                            TitleName = "قرارداد وام"
                        },
                        new
                        {
                            TitleId = 9,
                            TitleName = "قرارداد تسویه"
                        },
                        new
                        {
                            TitleId = 10,
                            TitleName = "قرارداد مجوز"
                        });
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("tbl_Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            Name = "شعبه دادگاه تهران"
                        },
                        new
                        {
                            LocationId = 2,
                            Name = "شعبه دادگاه مشهد"
                        },
                        new
                        {
                            LocationId = 3,
                            Name = "شعبه دادگاه اصفهان"
                        },
                        new
                        {
                            LocationId = 4,
                            Name = "شعبه دادگاه شیراز"
                        },
                        new
                        {
                            LocationId = 5,
                            Name = "شعبه دادگاه تبریز"
                        },
                        new
                        {
                            LocationId = 6,
                            Name = "شعبه دادگاه کرج"
                        },
                        new
                        {
                            LocationId = 7,
                            Name = "شعبه دادگاه اهواز"
                        },
                        new
                        {
                            LocationId = 8,
                            Name = "شعبه دادگاه قم"
                        },
                        new
                        {
                            LocationId = 9,
                            Name = "شعبه دادگاه رشت"
                        },
                        new
                        {
                            LocationId = 10,
                            Name = "شعبه دادگاه یزد"
                        });
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<string>("OptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("tbl_Options");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbl_Organizations");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_PartyContract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ContractTitleTitleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartyOneId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyOneName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyOneStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyTwoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyTwoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyTwoStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<string>("TitleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractId");

                    b.HasIndex("ContractTitleTitleId");

                    b.HasIndex("PartyOneId");

                    b.HasIndex("PartyTwoId");

                    b.ToTable("tbl_PartyContracts");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("tbl_Provinces");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("tbl_Questions");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_ReportInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_ReportInfos");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Requests");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_SuggestedCase", b =>
                {
                    b.Property<int>("SuggestedCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuggestedCaseId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("CaseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuggestedCaseId");

                    b.ToTable("tbl_SuggestedCases");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("TaskDate")
                        .HasColumnType("date");

                    b.Property<string>("TaskDateString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("TaskEndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("TaskStartTime")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TaskId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_Tasks");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_TaskMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("tbl_TaskMessages");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<string>("TestName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestId");

                    b.ToTable("tbl_Tests");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TicketStatusId");

                    b.ToTable("tbl_Tickets");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_TicketMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("tbl_TicketMessages");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbl_TicketStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = 2,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Closed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Resolved"
                        });
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("TopicId");

                    b.HasIndex("TestId");

                    b.ToTable("tbl_Topics");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("tbl_Users");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInfoId"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_UserInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Answer", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Question", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("TestWithValue.Domain.Enitities.Tbl_Answer", "QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Test", "Test")
                        .WithMany("Answers")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Question");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_CartItem", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Case", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Location", "Location")
                        .WithMany("Cases")
                        .HasForeignKey("LocationId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_City", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Province", "province")
                        .WithMany("cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("province");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Contract", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_ContractClauseMapping", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_ContractClause", "Clause")
                        .WithMany("ContractClauseMappings")
                        .HasForeignKey("ClauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_PartyContract", "Contract")
                        .WithMany("ContractClauseMappings")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clause");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Option", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Test", "Test")
                        .WithMany("Options")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_PartyContract", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_ContractTitle", "ContractTitle")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractTitleTitleId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "PartyOne")
                        .WithMany()
                        .HasForeignKey("PartyOneId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "PartyTwo")
                        .WithMany()
                        .HasForeignKey("PartyTwoId");

                    b.Navigation("ContractTitle");

                    b.Navigation("PartyOne");

                    b.Navigation("PartyTwo");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Question", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_ReportInfo", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Request", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Task", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Location", "Location")
                        .WithMany("Tasks")
                        .HasForeignKey("LocationId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_TaskMessage", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Task", "Task")
                        .WithMany("Messages")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Ticket", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_TicketStatus", "TicketStatus")
                        .WithMany()
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("TicketStatus");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_TicketMessage", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Ticket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Topic", b =>
                {
                    b.HasOne("TestWithValue.Domain.Enitities.Tbl_Test", "Test")
                        .WithMany("Topics")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_UserInfo", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_ContractClause", b =>
                {
                    b.Navigation("ContractClauseMappings");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_ContractTitle", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Location", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_PartyContract", b =>
                {
                    b.Navigation("ContractClauseMappings");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Province", b =>
                {
                    b.Navigation("cities");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Question", b =>
                {
                    b.Navigation("Answer");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Task", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Test", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");

                    b.Navigation("Questions");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("TestWithValue.Domain.Enitities.Tbl_Ticket", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
