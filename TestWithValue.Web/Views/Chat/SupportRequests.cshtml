@{
    ViewData["Title"] = "Support Requests";
}

<h1>Support Requests</h1>

<div>
    <h3>All Tasks</h3>
    <button onclick="loadAllTasks()">Load All Tasks</button>
    <ul id="allTaskList"></ul>
</div>

<div id="taskContainer">
    <h3>Tasks:</h3>
    <!-- وظایف در اینجا نشان داده می‌شوند -->
</div>

<div id="messageContainer">
    <h3>User Requests:</h3>
    <!-- پیام‌ها در اینجا نمایش داده می‌شوند -->
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@7.0.12/dist/browser/signalr.min.js"></script>

    <script>
        // ایجاد اتصال SignalR به هاب
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/taskhub") // URL هاب شما
            .build();

        // متغیر global برای ذخیره taskId
        let currentTaskId = null;

        connection.on("ReceiveNewTask", function (task) {
            const container = document.getElementById('taskContainer');
            const taskDiv = document.createElement('div');
            taskDiv.className = 'task';

            // ذخیره taskId در متغیر global
            currentTaskId = task.taskId;

            taskDiv.innerHTML = `
                <h4>${task.title}</h4>
                <p>Date: ${task.taskDate}</p>
                <p>Status: <strong>${task.isDone ? "Done" : "Pending"}</strong></p>
            `;

            const editButton = document.createElement('button');
            editButton.textContent = 'Edit';
            editButton.className = 'editButton';

            editButton.addEventListener('click', function () {
                const newMessage = prompt("Edit the message:", task.message);
                if (newMessage) {
                    // به‌روزرسانی پیام در رابط کاربری
                    taskDiv.querySelector('.message-text').textContent = newMessage;

                    // استفاده از taskId ذخیره‌شده در متغیر global
                    connection.invoke("EditUserRequest", currentTaskId, newMessage)
                        .catch(function (err) {
                            console.error("Error while editing task: " + err);
                        });
                }
            });

            taskDiv.appendChild(editButton);
            container.appendChild(taskDiv);
        });

        connection.on("ReceiveRequestFromUser", function (userId, message, title, taskId) {
            const container = document.getElementById('messageContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message';
            messageDiv.innerHTML = `
                <p>User ID: ${userId}</p>
                <p class="message-text">${message}</p>
                <button class="editButton">Edit</button>
            `;

            // افزودن قابلیت ویرایش پیام
            const editButton = messageDiv.querySelector('.editButton');
            editButton.addEventListener('click', function () {
                const newMessage = prompt("Edit the message:", message);
                if (newMessage) {
                    // به‌روزرسانی پیام در رابط کاربری
                    messageDiv.querySelector('.message-text').textContent = newMessage;

                    // ارسال پیام ویرایش شده به سرور همراه با taskId
                    connection.invoke("EditUserRequest", currentTaskId, newMessage).catch(function (err) {
                        console.error("Error while editing message: " + err);
                    });
                }
            });

            container.appendChild(messageDiv);
        });

        // اتصال به SignalR
        connection.start().then(function () {
            console.log("Connected to SignalR!");
        }).catch(function (err) {
            console.error("Error while starting connection: " + err);
        });
        function loadAllTasks() {
            $.ajax({
                url: '/Chat/GetAllTasks',
                type: 'GET',
                success: function (tasks) {
                    const list = $('#allTaskList');
                    list.empty();

                    if (tasks.length > 0) {
                        tasks.forEach(task => {
                            const listItem = $(`
                                <li>
                                    <strong>${task.title}</strong> - ${task.taskDate}
                                    [${task.isDone ? 'Done' : 'Pending'}]
                                    <span> (Task ID: ${task.taskId}) </span> <!-- نمایش taskId -->
                                    <button class="showMessageButton" data-task-id="${task.taskId}">Show Message</button>
                                </li>
                            `);

                            list.append(listItem);
                        });

                        // افزودن Event Listener به دکمه‌های "Show Message"
                        $('.showMessageButton').on('click', function () {
                            const taskId = $(this).data('task-id');
                            loadTaskMessage(taskId);
                        });
                    } else {
                        list.append('<li>No tasks found.</li>');
                    }
                },
                error: function () {
                    alert('Error loading tasks.');
                }
            });
        }


        function loadTaskMessage(taskId) {
            $.ajax({
                url: `/Chat/GetTaskMessage/${taskId}`,
                type: 'GET',
                success: function (messages) {
                    const container = $('#messageContainer');
                    container.empty();

                    if (messages && messages.length > 0) {
                        container.append(`<h4>Messages for Task ID: ${taskId}</h4>`);
                        messages.forEach(msg => {
                            const messageDiv = $(`
                                <div class="message">
                                    <p><strong>Sender:</strong> ${msg.senderId || 'Unknown'}</p>
                                    <p class="message-text"><strong>Message:</strong> ${msg.message || 'No content'}</p>
                                    <p><strong>Sent At:</strong> ${new Date(msg.sentAt).toLocaleString()}</p>
                                    <button class="editButton">Edit</button>
                                </div>
                            `);
                            container.append(messageDiv);

                            // افزودن عملکرد ویرایش
                            messageDiv.find('.editButton').on('click', function () {
                                const messageText = messageDiv.find('.message-text').text();
                                // ایجاد فضای ویرایش
                                const editArea = $('<textarea class="edit-message-area"></textarea>').val(messageText);
                                const saveButton = $('<button class="save-button">Save</button>');

                                messageDiv.empty(); // پاک کردن محتوای قبلی
                                messageDiv.append(editArea);
                                messageDiv.append(saveButton);

                                // افزودن عملکرد دکمه Save
                                saveButton.on('click', function () {
                                    const editedMessage = editArea.val();

                                    // ارسال پیام ویرایش‌شده به SignalR
                                    connection.invoke("EditUserRequest", taskId, editedMessage)
                                        .then(function () {
                                            // نمایش مجدد پیام ویرایش‌شده
                                            messageDiv.empty();
                                            messageDiv.append(`
                                                <p><strong>Sender:</strong> ${msg.senderId || 'Unknown'}</p>
                                                <p class="message-text"><strong>Message:</strong> ${editedMessage}</p>
                                                <p><strong>Sent At:</strong> ${new Date(msg.sentAt).toLocaleString()}</p>
                                            `);
                                        })
                                        .catch(function (err) {
                                            console.error("Error while editing task: " + err);
                                        });
                                });
                            });
                        });
                    } else {
                        container.append('<p>No messages found for this task.</p>');
                    }
                },
                error: function () {
                    alert('Error loading messages for the task.');
                }
            });
        }
    </script>

}

<style>
    .message {
        border: 1px solid #ccc;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

        .message p {
            margin: 5px 0;
            font-size: 14px;
        }

        .message strong {
            color: #333;
        }

    .editButton {
        margin-top: 5px;
        padding: 5px 10px;
        font-size: 12px;
        cursor: pointer;
    }

    /* استایل کلی برای فضای ویرایش */
    .edit-message-area {
        width: 100%;
        min-height: 100px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        font-family: Arial, sans-serif;
        box-sizing: border-box;
        background-color: #f9f9f9;
        resize: vertical;
        margin-bottom: 10px;
    }

    /* دکمه ذخیره */
    .save-button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.3s;
    }

        .save-button:hover {
            background-color: #45a049;
        }

    /* استایل دکمه ویرایش */
    .editButton {
        background-color: #f0ad4e;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

        .editButton:hover {
            background-color: #e08732;
        }

    /* فضای پیام */
    .message {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #fff;
    }

    /* برای نمایش هر پیام */
    .message-text {
        margin: 10px 0;
        font-size: 16px;
        line-height: 1.5;
    }

</style>
